import telebot
import datetime
import time
import threading
import random
import logging

# Включение логирования
telebot.logger.setLevel(logging.DEBUG)

TOKEN_API = '77497653029:AAFfjK47Awm12gpMl9zbCqf0PDufqyE-4_E'
bot = telebot.TeleBot('7497653029:AAFfjK47Awm12gpMl9zbCqf0PDufqyE-4_E')


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, 'Привет, я напоминаю Вам о ежедневном уходе за твоей собакой')
    reminder_thread = threading.Thread(target=send_reminders, args=(message.chat.id,))
    reminder_thread.start()

@bot.message_handler(commands=['help'])
def start_message(message):
    bot.reply_to(message, 'Привет, вот мои возможности:\n /info: факты об уходе за питомцем\n /list: расписание твой собаки\n /start: Начать следить за временем')

@bot.message_handler(commands=['list'])
def start_message(message):
    bot.reply_to(message, 'Утренняя прогулка (7:00 - 8:00)\n- Выгуляйте собаку, чтобы она смогла сделать свои нужды.\n- Дайте ей возможность побегать и поиграть, чтобы выплеснуть энергию.\n- Обеспечьте доступ к свежей воде после прогулки.\nКормление (8:30)\n- Подготовьте и кормите собаку сбалансированным питанием, соответствующим её возрасту и размеру.\n- Уберите миски после того, как собака поест.\nДневная активность (12:00 - 13:00)\n- Прогулка или игра на свежем воздухе.\n- Обучающие упражнения или тренировки для поддержки умственного развития.\n Вечерняя прогулка (17:00 - 18:00)\n- Повторите утреннюю прогулку.\n- Проверьте состояние лап и шерсти после прогулки.\nВечерние процедуры (21:00 - 22:00)\n- Кормление.\n- Спокойные игры или общение.\n- Подготовка ко сну: обеспечьте собаке комфортное место для отдыха.')


@bot.message_handler(commands=['info'])
def start_message(message):
           
    list = ["Кормление: Обеспечьте сбалансированное питание, соответствующее возрасту, размеру и активности собаки.",
    "Прогулки: Регулярные прогулки для физической активности и умственной стимуляции.",
    "Вода: Собака должна иметь постоянный доступ к свежей и чистой воде.",
    "Гигиена: Собаке необходима регулярная чистка зубов, уход за шерстью и когтями.",
    "Ветеринар: Обязательен регулярные ветеринарные осмотры и прививки.",
    "Обучение: Постоянное обучайте и тренируйте вашу собаку для хорошего поведения.",
    "Игры: Используйте Игрушки и играйте с собакой для умственной стимуляции и развлечения.",
    "Социализация: Собаке необходимы общение с другими собаками и людьми для разития социальных навыков.",
    "Безопасность: Обеспечьте собаке безопасную среду дома и во время прогулок.",
    "Любовь и внимание: Регулярное общайтесь и будте внимательны к питомцу для его эмоционального благополучия."]
    random_fact = random.choice(list) 
    bot.reply_to(message, f'Немного информации об уходе за собакой. {random_fact}')

def send_reminders(chat_id):
    rem1 = '07:00'
    rem2 = '08:30'
    rem3 = '12:00'
    rem4 = '17:21'
    rem5 = '21:00'

    while True:            
        now = datetime.datetime.now().strftime('%H:%M')
        if now == rem1: 
            txt = ' Время утренней прогулки'
            bot.send_message(chat_id, f'Настало {now}. {txt}')
            time.sleep(61)
        elif now == rem2:
            txt = ' Время кормления собаки'
            bot.send_message(chat_id, f'Настало {now}. {txt}')
            time.sleep(61)
        elif now == rem3:
            txt = ' Время дневной активности:  Прогулка или игра на свежем воздухе, Обучающие упражнения или тренировки для поддержки умственного развития.'
            bot.send_message(chat_id, f'Настало {now}. {txt}')
            time.sleep(61)
        elif now == rem4:
            txt = ' Время вечерней прогулки: Повторите утреннюю прогулку, проверьте состояние лап и шерсти после прогулки.'
            bot.send_message(chat_id, f'Настало {now}. {txt}')
            time.sleep(61)
        elif now == rem5:
            txt = ' Время вечерних процедур: Кормление, Спокойные игры или общение, Подготовка ко сну: обеспечьте собаке комфортное место для отдыха.'
            bot.send_message(chat_id, f'Настало {now}. {txt}')
            time.sleep(61)
        
        
        time.sleep(1)  
    
bot.polling(non_stop = True)